// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addressbook.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_addressbook_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal
{
  class AnyMetadata;
} // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_addressbook_2eproto
{
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_addressbook_2eproto;
namespace tutorial
{
  class Account;
  class AccountDefaultTypeInternal;
  extern AccountDefaultTypeInternal _Account_default_instance_;
} // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template <>
::tutorial::Account *Arena::CreateMaybeMessage<::tutorial::Account>(Arena *);
PROTOBUF_NAMESPACE_CLOSE
namespace tutorial
{

  // ===================================================================

  class Account PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Account) */
  {
  public:
    inline Account() : Account(nullptr) {}
    virtual ~Account();

    Account(const Account &from);
    Account(Account &&from) noexcept
        : Account()
    {
      *this = ::std::move(from);
    }

    inline Account &operator=(const Account &from)
    {
      CopyFrom(from);
      return *this;
    }
    inline Account &operator=(Account &&from) noexcept
    {
      if (GetArena() == from.GetArena())
      {
        if (this != &from)
          InternalSwap(&from);
      }
      else
      {
        CopyFrom(from);
      }
      return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor()
    {
      return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor()
    {
      return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection()
    {
      return GetMetadataStatic().reflection;
    }
    static const Account &default_instance();

    static inline const Account *internal_default_instance()
    {
      return reinterpret_cast<const Account *>(
          &_Account_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        0;

    friend void swap(Account &a, Account &b)
    {
      a.Swap(&b);
    }
    inline void Swap(Account *other)
    {
      if (other == this)
        return;
      if (GetArena() == other->GetArena())
      {
        InternalSwap(other);
      }
      else
      {
        ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
      }
    }
    void UnsafeArenaSwap(Account *other)
    {
      if (other == this)
        return;
      GOOGLE_DCHECK(GetArena() == other->GetArena());
      InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline Account *New() const final
    {
      return CreateMaybeMessage<Account>(nullptr);
    }

    Account *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final
    {
      return CreateMaybeMessage<Account>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
    void CopyFrom(const Account &from);
    void MergeFrom(const Account &from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Account *other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
      return "tutorial.Account";
    }

  protected:
    explicit Account(::PROTOBUF_NAMESPACE_ID::Arena *arena);

  private:
    static void ArenaDtor(void *object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

  public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
      ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
      return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
    }

  public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
      kNameFieldNumber = 2,
      kPasswordFieldNumber = 3,
      kIDFieldNumber = 1,
    };
    // string name = 2;
    void clear_name();
    const std::string &name() const;
    void set_name(const std::string &value);
    void set_name(std::string &&value);
    void set_name(const char *value);
    void set_name(const char *value, size_t size);
    std::string *mutable_name();
    std::string *release_name();
    void set_allocated_name(std::string *name);

  private:
    const std::string &_internal_name() const;
    void _internal_set_name(const std::string &value);
    std::string *_internal_mutable_name();

  public:
    // string password = 3;
    void clear_password();
    const std::string &password() const;
    void set_password(const std::string &value);
    void set_password(std::string &&value);
    void set_password(const char *value);
    void set_password(const char *value, size_t size);
    std::string *mutable_password();
    std::string *release_password();
    void set_allocated_password(std::string *password);

  private:
    const std::string &_internal_password() const;
    void _internal_set_password(const std::string &value);
    std::string *_internal_mutable_password();

  public:
    // uint64 ID = 1;
    void clear_id();
    ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
    void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  private:
    ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
    void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  public:
    // @@protoc_insertion_point(class_scope:tutorial.Account)
  private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::uint64 id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_addressbook_2eproto;
  };
  // ===================================================================

  // ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
  // Account

  // uint64 ID = 1;
  inline void Account::clear_id()
  {
    id_ = PROTOBUF_ULONGLONG(0);
  }
  inline ::PROTOBUF_NAMESPACE_ID::uint64 Account::_internal_id() const
  {
    return id_;
  }
  inline ::PROTOBUF_NAMESPACE_ID::uint64 Account::id() const
  {
    // @@protoc_insertion_point(field_get:tutorial.Account.ID)
    return _internal_id();
  }
  inline void Account::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value)
  {

    id_ = value;
  }
  inline void Account::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value)
  {
    _internal_set_id(value);
    // @@protoc_insertion_point(field_set:tutorial.Account.ID)
  }

  // string name = 2;
  inline void Account::clear_name()
  {
    name_.ClearToEmpty();
  }
  inline const std::string &Account::name() const
  {
    // @@protoc_insertion_point(field_get:tutorial.Account.name)
    return _internal_name();
  }
  inline void Account::set_name(const std::string &value)
  {
    _internal_set_name(value);
    // @@protoc_insertion_point(field_set:tutorial.Account.name)
  }
  inline std::string *Account::mutable_name()
  {
    // @@protoc_insertion_point(field_mutable:tutorial.Account.name)
    return _internal_mutable_name();
  }
  inline const std::string &Account::_internal_name() const
  {
    return name_.Get();
  }
  inline void Account::_internal_set_name(const std::string &value)
  {

    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
  }
  inline void Account::set_name(std::string &&value)
  {

    name_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:tutorial.Account.name)
  }
  inline void Account::set_name(const char *value)
  {
    GOOGLE_DCHECK(value != nullptr);

    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
    // @@protoc_insertion_point(field_set_char:tutorial.Account.name)
  }
  inline void Account::set_name(const char *value,
                                size_t size)
  {

    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:tutorial.Account.name)
  }
  inline std::string *Account::_internal_mutable_name()
  {

    return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
  }
  inline std::string *Account::release_name()
  {
    // @@protoc_insertion_point(field_release:tutorial.Account.name)
    return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  }
  inline void Account::set_allocated_name(std::string *name)
  {
    if (name != nullptr)
    {
    }
    else
    {
    }
    name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
                       GetArena());
    // @@protoc_insertion_point(field_set_allocated:tutorial.Account.name)
  }

  // string password = 3;
  inline void Account::clear_password()
  {
    password_.ClearToEmpty();
  }
  inline const std::string &Account::password() const
  {
    // @@protoc_insertion_point(field_get:tutorial.Account.password)
    return _internal_password();
  }
  inline void Account::set_password(const std::string &value)
  {
    _internal_set_password(value);
    // @@protoc_insertion_point(field_set:tutorial.Account.password)
  }
  inline std::string *Account::mutable_password()
  {
    // @@protoc_insertion_point(field_mutable:tutorial.Account.password)
    return _internal_mutable_password();
  }
  inline const std::string &Account::_internal_password() const
  {
    return password_.Get();
  }
  inline void Account::_internal_set_password(const std::string &value)
  {

    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
  }
  inline void Account::set_password(std::string &&value)
  {

    password_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:tutorial.Account.password)
  }
  inline void Account::set_password(const char *value)
  {
    GOOGLE_DCHECK(value != nullptr);

    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
    // @@protoc_insertion_point(field_set_char:tutorial.Account.password)
  }
  inline void Account::set_password(const char *value,
                                    size_t size)
  {

    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:tutorial.Account.password)
  }
  inline std::string *Account::_internal_mutable_password()
  {

    return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
  }
  inline std::string *Account::release_password()
  {
    // @@protoc_insertion_point(field_release:tutorial.Account.password)
    return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  }
  inline void Account::set_allocated_password(std::string *password)
  {
    if (password != nullptr)
    {
    }
    else
    {
    }
    password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
                           GetArena());
    // @@protoc_insertion_point(field_set_allocated:tutorial.Account.password)
  }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__

  // @@protoc_insertion_point(namespace_scope)

} // namespace tutorial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto
